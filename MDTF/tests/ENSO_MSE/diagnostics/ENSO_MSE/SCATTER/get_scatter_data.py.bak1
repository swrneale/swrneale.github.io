import os
import subprocess
import commands

shared_dir = os.path.join(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
    'shared'
)
sys.path.insert(0, shared_dir)

from get_lon_lat_plevels_in import  get_lon_lat_plevels_in


def get_scatter_data( imax, jmax, clon1, clon2, clat1, clat2, elon1, elon2, elat1, elat2, undef):

#============================================================
# get_ncl_data  - call to get the input data  full and climatology to make anomaly 
#============================================================
#   read and average Central and Eastern Pacific MSE variables for SCATTER plots 
    composite_dir = os.environ["ENSO_MSE_WKDIR_COMPOSITE"] + "/model/"
    mse_dir       = os.environ["ENSO_MSE_WKDIR_MSE"] + "/model"
#######   output directory 
    scatter_dir   = os.environ["ENSO_MSE_WKDIR_SCATTER"] +  "/netCDF/"
##   conversion from kg/m2/s  to W/m2
    prfactor = 2.5E+06   

###  readin lon/lat data :
    prefix0 =  composite_dir + "/netCDF/DATA/"
    imax, jmax, zmax = get_dimensions( imax,jmax, zmax, prefix1)
    lon    = np.zeros(imax,dtype='float32')
    lat    = np.zeros(jmax,dtype='float32')
    plev   = np.zeros(zmax,dtype='float32')
    lon, lat, plevs = get_lon_lat_plevels_in( imax, jmax, zmax, lon, lat, plevs, prefix0)

    prefix1 = composite_dir + "/netCDF/ELNINO/"
    prefix  = composite_dir + "/netCDF/"
    if (os.path.exists(prefix1+"/PR.grd")):
        f = open(prefix1+'/PR.grd', 'rb')
        data = np.fromfile(f, dtype='float32')
        pr =  np.reshape( data, (imax, jmax), order='F')
        pr = np.ma.masked_greater_equal( pr,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix1+"/PR.grd"
        print " exiting get_scatter_data.py "
        sys.exit()

    if (os.path.exists(prefix+"/PR_clim.grd")):
        f = open(prefix+'/PR_clim.grd', 'rb')
        data = np.fromfile(f, dtype='float32')
        clim = np.reshape( data, (imax, jmax), order='F')
        clim = np.ma.masked_greater_equal( clim,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix+"/PR_clim.grd"
        print " exiting get_scatter_data.py "
        sys.exit()
##   define as anomaly 
    pr = pr - clim
####    FRAD :
    if (os.path.exists(prefix1+"/FRAD.grd")):
        f = open(prefix1+'/FRAD.grd', 'rb')
        data = np.fromfile(f, dtype='float32')
        frad =  np.reshape( data, (imax, jmax), order='F')
        frad = np.ma.masked_greater_equal( frad,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix1+"/FRAD.grd"
        print " exiting get_scatter_data.py "
        sys.exit()

    if (os.path.exists(prefix+"/FRAD_clim.grd")):
        f = open(prefix+'/FRAD_clim.grd', 'rb')
        data = np.fromfile(f, dtype='float32')
        clim = np.reshape( data, (imax, jmax), order='F')
        clim = np.ma.masked_greater_equal( clim,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix+"/FRAD_clim.grd"
        print " exiting get_scatter_data.py "
        sys.exit()
##   define as anomaly
    frad = frad - clim
###########   LHF 
    if (os.path.exists(prefix1+"/LHF.grd")):
        f = open(prefix1+'/LHF.grd', 'rb')
        data = np.fromfile(f, dtype='float32')
        lhf =  np.reshape( data, (imax, jmax), order='F')
        lhf =  np.ma.masked_greater_equal( lhf,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix1+"/LHF.grd"
        print " exiting get_scatter_data.py "
        sys.exit()

    if (os.path.exists(prefix+"/LHF_clim.grd")):
        f = open(prefix+'/LHF_clim.grd', 'rb')
        data = np.fromfile(f, dtype='float32')
        clim = np.reshape( data, (imax, jmax), order='F')
        clim = np.ma.masked_greater_equal( clim,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix+"/LHF_clim.grd"
        print " exiting get_scatter_data.py "
        sys.exit()
##   define as anomaly
    lhf = lhf - clim
###   SHF 
    if (os.path.exists(prefix1+"/SHF.grd")):
        f = open(prefix1+'/SHF.grd', 'rb')
        data = np.fromfile(f, dtype='float32')
        shf =  np.reshape( data, (imax, jmax), order='F')
        shf =  np.ma.masked_greater_equal( shf,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix1+"/SHF.grd"
        print " exiting get_scatter_data.py "
        sys.exit()

    if (os.path.exists(prefix+"/SHF_clim.grd")):
        f = open(prefix+'/SHF_clim.grd', 'rb')
        data = np.fromfile(f, dtype='float32')
        clim = np.reshape( data, (imax, jmax), order='F')
        clim = np.ma.masked_greater_equal( clim,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix+"/SHF_clim.grd"
        print " exiting get_scatter_data.py "
        sys.exit()
##   define as anomaly
    shf = shf - clim
################ 
##  MSE components
    prefix1 = mse_dir + "/netCDF/ELNINO/"
    prefix  = mse_dir + "/netCDF/"
##     madv  
    if (os.path.exists(prefix1+"/MSE_madv.out")):
        f = open(prefix1+'/MSE_madv.out', 'rb')
        data = np.fromfile(f, dtype='float32')
        madv =  np.reshape( data, (imax, jmax), order='F')
        madv =  np.ma.masked_greater_equal( madv,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix+"/MSE_madv.out"
        print " exiting get_scatter_data.py "
        sys.exit()

    if (os.path.exists(prefix+"/MSE_madv_clim.out")):
        f = open(prefix+'/MSE_madv_clim.out', 'rb')
        data = np.fromfile(f, dtype='float32')
        clim = np.reshape( data, (imax, jmax), order='F')
        clim = np.ma.masked_greater_equal( clim,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix+"/MSE_madv_clim.out"
        print " exiting get_scatter_data.py "
        sys.exit()
##   define as anomaly
    madv = madv - clim
######### 
#     omse =  vertical advection of MSE 
    if (os.path.exists(prefix1+"/MSE_omse.out")):
        f = open(prefix1+'/MSE_omse.out', 'rb')
        data = np.fromfile(f, dtype='float32')
        omse =  np.reshape( data, (imax, jmax), order='F')
        omse =  np.ma.masked_greater_equal( shf,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix+"/MSE_omse.out"
        print " exiting get_scatter_data.py "
        sys.exit()

    if (os.path.exists(prefix+"/MSE_omse_clim.out")):
        f = open(prefix+'/MSE_madv_clim.out', 'rb')
        data = np.fromfile(f, dtype='float32')
        clim = np.reshape( data, (imax, jmax), order='F')
        clim = np.ma.masked_greater_equal( clim,  undef, copy=False)
        f.close()
    else:
        print "missing file " + prefix+"/MSE_omse_clim.out"
        print " exiting get_scatter_data.py "
        sys.exit()
##   define as anomaly
    omse = omse - clim
##################################### 
###  select area boxes and write out 
###   extract the two  domain as area averages : Central and Eastern Pacific 
#     select the averaging indexes  over the respective boxes Central or Eastern Pacific 
#   Central first:
    for i in range(0, imax):
              if( lon[i] <= clon1 and lon[i+1] >= clon1):
                     ii1 = i+1
                     break
    for i in range(0, imax):
              if( lon[i] <= clon2 and lon[i+1] >= clon2):
                     ii2 = i
                     break
    for j in range(0, jmax):
              if( lat[j] <= clat1 and lat[j+1] >= clat1):
                     jj1 = j+1
                     break
    for j in range(0, jmax):
              if( lat[j] <= clat2 and lat[j+1] >= clat2):
                     jj2 = j
                     break
##  PR:
    yy = (pr[ii1:ii2, jj1:jj2]) * prfactor
    yy = yy.flatten('F')
    pr1 =  np.mean(yy)
#   moist advection 
    yy = madv[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    madv1 =  np.mean(yy)
##    Frad
    yy = frad[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    frad1 =  np.mean(yy)
##   omse vertical advection of MSE
    yy = omse[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    omse1 =  np.mean(yy)
##    LHF
    yy = lhf[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    lhf1 =  np.mean(yy)
##   SHF 
    yy = shf[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    shf1 =  np.mean(yy)
################  

#    Eastern Pacific 
    for i in range(0, imax):
              if( lon[i] <= elon1 and lon[i+1] >= elon1):
                     ii1 = i+1
                     break
    for i in range(0, imax):
              if( lon[i] <= elon2 and lon[i+1] >= elon2):
                     ii2 = i
                     break
    for j in range(0, jmax):
              if( lat[j] <= elat1 and lat[j+1] >= elat1):
                     jj1 = j+1
                     break
    for j in range(0, jmax):
              if( lat[j] <= elat2 and lat[j+1] >= elat2):
                     jj2 = j
                     break
##  PR:
    yy = (pr[ii1:ii2, jj1:jj2])*factor
    yy = yy.flatten('F')
    pr2 =  np.mean(yy)
#   moist advection
    yy = madv[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    madv2 =  np.mean(yy)
##    Frad
    yy = frad[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    frad2 =  np.mean(yy)
##   omse vertical advection of MSE
    yy = omse[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    omse2 =  np.mean(yy)
##    LHF
    yy = lhf[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    lhf2 =  np.mean(yy)
##   SHF
    yy = shf[ii1:ii2, jj1:jj2]
    yy = yy.flatten('F')
    shf2 =  np.mean(yy)

##############  output to NEW MODEL  file ..
    nameout = scatter_dir + "central_pacific_MSE_terms_NEW_MODEL.txt"

    return 0

###########################
